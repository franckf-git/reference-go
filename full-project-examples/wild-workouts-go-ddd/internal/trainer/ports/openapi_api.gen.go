// Package ports provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package ports

import (
	"context"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi"
)

type ServerInterface interface {
	//  (GET /trainer/calendar)
	GetTrainerAvailableHours(w http.ResponseWriter, r *http.Request)
	//  (PUT /trainer/calendar/make-hour-available)
	MakeHourAvailable(w http.ResponseWriter, r *http.Request)
	//  (PUT /trainer/calendar/make-hour-unavailable)
	MakeHourUnavailable(w http.ResponseWriter, r *http.Request)
}

// ParamsForGetTrainerAvailableHours operation parameters from context
func ParamsForGetTrainerAvailableHours(ctx context.Context) *GetTrainerAvailableHoursParams {
	return ctx.Value("GetTrainerAvailableHoursParams").(*GetTrainerAvailableHoursParams)
}

// GetTrainerAvailableHours operation middleware
func GetTrainerAvailableHoursCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		ctx = context.WithValue(ctx, "bearerAuth.Scopes", []string{""})

		// Parameter object where we will unmarshal all parameters from the context
		var params GetTrainerAvailableHoursParams

		// ------------- Required query parameter "dateFrom" -------------
		if paramValue := r.URL.Query().Get("dateFrom"); paramValue != "" {

		} else {
			http.Error(w, "Query argument dateFrom is required, but not found", http.StatusBadRequest)
			return
		}

		err = runtime.BindQueryParameter("form", true, true, "dateFrom", r.URL.Query(), &params.DateFrom)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter dateFrom: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Required query parameter "dateTo" -------------
		if paramValue := r.URL.Query().Get("dateTo"); paramValue != "" {

		} else {
			http.Error(w, "Query argument dateTo is required, but not found", http.StatusBadRequest)
			return
		}

		err = runtime.BindQueryParameter("form", true, true, "dateTo", r.URL.Query(), &params.DateTo)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter dateTo: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "GetTrainerAvailableHoursParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// MakeHourAvailable operation middleware
func MakeHourAvailableCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		ctx = context.WithValue(ctx, "bearerAuth.Scopes", []string{""})

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// MakeHourUnavailable operation middleware
func MakeHourUnavailableCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		ctx = context.WithValue(ctx, "bearerAuth.Scopes", []string{""})

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(GetTrainerAvailableHoursCtx)
		r.Get("/trainer/calendar", si.GetTrainerAvailableHours)
	})
	r.Group(func(r chi.Router) {
		r.Use(MakeHourAvailableCtx)
		r.Put("/trainer/calendar/make-hour-available", si.MakeHourAvailable)
	})
	r.Group(func(r chi.Router) {
		r.Use(MakeHourUnavailableCtx)
		r.Put("/trainer/calendar/make-hour-unavailable", si.MakeHourUnavailable)
	})

	return r
}
